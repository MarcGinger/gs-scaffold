@startuml
skinparam style strictuml
skinparam linetype ortho

title Event-Sourced Secure Microservices Architecture with Query Flow

actor "External Client" as Client

rectangle "LDAP\n(AuthN)" as LDAP
rectangle "OPA\n(AuthZ)" as OPA

' Outside World Entry Point
Client --> LDAP : Request (Query or Command)
LDAP --> OPA : Access Token / Role Evaluation

package "Bounded Context" {
  rectangle "Infrastructure Layer" as InfraA
  rectangle "Application Layer" as AppA
  rectangle "Domain Layer" as DomainA
  rectangle "EventStoreDB" as ESDBA
  rectangle "Projector" as ProjectorA
  database "Redis / PostgreSQL\n(Projections)" as CacheA
}

' ==== Write Flow ====
OPA --> InfraA : Authorized Command
InfraA --> AppA
AppA --> DomainA
DomainA --> AppA : Emit Domain Events
AppA --> InfraA
InfraA --> ESDBA : Append Events
ESDBA --> ProjectorA
ProjectorA --> CacheA : Build Projections

' ==== Query Flow ====
OPA --> InfraA : Authorized Query
InfraA --> CacheA : Read Projection Data

note right of OPA
Both Commands and Queries go through
LDAP â†’ OPA for centralized security.
Queries read from Redis/PostgreSQL;
Commands emit events via EventStoreDB.
end note

' ==== Kafka Integration ====
rectangle "Kafka" as Kafka

ProjectorA --> Kafka : Publish Domain Events
Kafka --> ProjectorA : Consume Domain Events
Kafka --> "Bounded Context B\nor\nExternal Client" : Event Subscription / Webhook

@enduml
